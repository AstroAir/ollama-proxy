# Multi-architecture Dockerfile for ollama-proxy
# Supports: linux/amd64, linux/arm64, linux/arm/v7

# Build arguments for metadata
ARG BUILD_DATE
ARG VERSION
ARG VCS_REF
ARG TARGETPLATFORM
ARG BUILDPLATFORM

# Stage 1: Build stage with platform-specific optimizations
FROM --platform=$BUILDPLATFORM python:3.12-slim as builder

# Add metadata labels
LABEL org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.version=$VERSION \
      org.opencontainers.image.revision=$VCS_REF \
      org.opencontainers.image.title="Ollama Proxy (Multi-arch)" \
      org.opencontainers.image.description="A proxy server that translates Ollama API calls to OpenRouter API calls" \
      org.opencontainers.image.source="https://github.com/your-org/ollama-proxy" \
      org.opencontainers.image.licenses="MIT"

# Install build dependencies based on target platform
RUN apt-get update && \
    case "$TARGETPLATFORM" in \
        "linux/amd64") \
            apt-get install -y build-essential curl git ;; \
        "linux/arm64") \
            apt-get install -y build-essential curl git gcc-aarch64-linux-gnu ;; \
        "linux/arm/v7") \
            apt-get install -y build-essential curl git gcc-arm-linux-gnueabihf ;; \
        *) \
            apt-get install -y build-essential curl git ;; \
    esac && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean

# Install uv with platform-specific optimizations
RUN pip install --no-cache-dir uv

# Set working directory
WORKDIR /app

# Copy project files
COPY pyproject.toml uv.lock README.md ./
COPY src/ ./src/

# Install dependencies with platform-specific optimizations
RUN case "$TARGETPLATFORM" in \
        "linux/arm/v7") \
            export CFLAGS="-mfpu=neon" && \
            uv sync --frozen --no-dev --no-cache ;; \
        *) \
            uv sync --frozen --no-dev --no-cache ;; \
    esac

# Stage 2: Runtime stage
FROM --platform=$TARGETPLATFORM python:3.12-slim as runtime

# Build arguments for runtime
ARG BUILD_DATE
ARG VERSION
ARG VCS_REF
ARG TARGETPLATFORM

# Add metadata labels
LABEL org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.version=$VERSION \
      org.opencontainers.image.revision=$VCS_REF \
      org.opencontainers.image.title="Ollama Proxy (Multi-arch)" \
      org.opencontainers.image.description="A proxy server that translates Ollama API calls to OpenRouter API calls" \
      org.opencontainers.image.source="https://github.com/your-org/ollama-proxy" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.platform=$TARGETPLATFORM

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y \
        ca-certificates \
        curl \
        tini \
    && apt-get upgrade -y \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN groupadd -r -g 1000 ollama && \
    useradd -r -u 1000 -g ollama -s /bin/false -d /app ollama

# Set working directory
WORKDIR /app

# Copy virtual environment from builder
COPY --from=builder --chown=ollama:ollama /app/.venv /app/.venv

# Copy application code
COPY --chown=ollama:ollama src/ ./src/
COPY --chown=ollama:ollama pyproject.toml ./

# Create necessary directories
RUN mkdir -p /app/data /app/logs && \
    chown -R ollama:ollama /app

# Switch to non-root user
USER ollama

# Set environment variables
ENV PATH="/app/.venv/bin:$PATH"
ENV PYTHONPATH="/app"
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Platform-specific environment variables
ENV TARGETPLATFORM=$TARGETPLATFORM

# Default environment variables
ENV HOST=0.0.0.0
ENV PORT=11434
ENV LOG_LEVEL=INFO
ENV ENVIRONMENT=production

# Health check with platform awareness
HEALTHCHECK --interval=30s --timeout=15s --start-period=30s --retries=3 \
    CMD python -c "import httpx; import sys; \
    try: \
        resp = httpx.get('http://localhost:${PORT}/health', timeout=10); \
        sys.exit(0 if resp.status_code == 200 else 1) \
    except: \
        sys.exit(1)" || exit 1

# Expose port
EXPOSE 11434

# Use tini as init system
ENTRYPOINT ["/usr/bin/tini", "--"]

# Default command
CMD ["python", "-m", "src.main"]

# Add platform information to the image
RUN echo "Platform: $TARGETPLATFORM" > /app/platform.txt
