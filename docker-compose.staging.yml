version: "3.8"

services:
  ollama-proxy:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VERSION: ${VERSION:-0.1.0}
        VCS_REF: ${VCS_REF:-}
    image: ollama-proxy:staging
    ports:
      - "${HOST_PORT:-11434}:11434"
    environment:
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - ENVIRONMENT=staging
      - HOST=0.0.0.0
      - PORT=11434
      - MODELS_FILTER_PATH=/app/data/models-filter.txt
      - OPENROUTER_BASE_URL=https://openrouter.ai/api/v1
      - OPENROUTER_TIMEOUT=300
      - MAX_CONCURRENT_REQUESTS=50
      - HEALTH_CHECK_INTERVAL=30
    volumes:
      - ./models-filter.txt:/app/data/models-filter.txt:ro
      - staging-data:/app/data
      - staging-logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import httpx; httpx.get('http://localhost:11434/health', timeout=5)",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - staging-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  # Redis for caching in staging
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - staging-redis-data:/data
    restart: unless-stopped
    networks:
      - staging-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Monitoring stack for staging
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.staging.yml:/etc/prometheus/prometheus.yml:ro
      - staging-prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--storage.tsdb.retention.time=7d"
    restart: unless-stopped
    networks:
      - staging-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - staging-grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - staging-network
    depends_on:
      - prometheus

  # Log aggregation
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - staging-loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - staging-network

  promtail:
    image: grafana/promtail:latest
    volumes:
      - staging-logs:/var/log/ollama:ro
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    networks:
      - staging-network
    depends_on:
      - loki

  # Load testing service
  locust:
    image: locustio/locust:latest
    ports:
      - "8089:8089"
    volumes:
      - ./tests/load_test.py:/mnt/locust/locustfile.py:ro
    command: -f /mnt/locust/locustfile.py --host=http://ollama-proxy:11434
    restart: unless-stopped
    networks:
      - staging-network
    depends_on:
      - ollama-proxy
    profiles:
      - load-testing

volumes:
  staging-data:
  staging-logs:
  staging-redis-data:
  staging-prometheus-data:
  staging-grafana-data:
  staging-loki-data:

networks:
  staging-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
