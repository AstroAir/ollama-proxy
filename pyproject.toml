[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ollama-proxy"
version = "0.1.0"
description = "A proxy server that translates Ollama API calls to OpenRouter API calls"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Ollama Proxy Contributors"},
]
keywords = ["ollama", "openrouter", "proxy", "api", "llm"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
dependencies = [
    "fastapi>=0.116.1",
    "httpx>=0.28.1",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",
    "structlog>=23.0.0",
    "uvicorn>=0.24.0",
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
]

[project.scripts]
# Main application entry points
ollama-proxy = "src.main:main"
ollama-proxy-server = "src.main:main"
ollama-proxy-dev = "src.main:dev_main"
ollama-proxy-daemon = "src.main:daemon_main"

# Administrative and utility entry points
ollama-proxy-admin = "src.main:admin_main"
ollama-proxy-health = "src.main:health_check"
ollama-proxy-config = "src.main:config_main"
ollama-proxy-benchmark = "src.main:benchmark_main"

# Development and testing entry points
ollama-proxy-test = "src.main:test_main"
ollama-proxy-lint = "src.main:lint_main"
ollama-proxy-format = "src.main:format_main"

# Unified CLI interface
ollama-proxy-cli = "src.main:cli_main"

[[tool.uv.index]]
url = "https://mirrors.aliyun.com/pypi/simple/"
default = true

[tool.uv]
python-install-mirror = "https://registry.npmmirror.com/-/binary/python-build-standalone"

[dependency-groups]
dev = [
    "black>=24.0.0",
    "flake8>=7.0.0",
    "isort>=5.13.0",
    "mkdocs-material>=9.0.0",
    "mkdocs>=1.5.0",
    "mypy>=1.17.1",
    "pre-commit>=3.6.0",
    "psutil>=6.0.0",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest>=8.4.1",
    "respx>=0.21.0",
    "types-psutil>=7.0.0.20250801",
    "types-requests>=2.32.4.20250809",
]
test = [
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "locust>=2.17.0",
    "pip-audit>=2.6.0",
    "bandit>=1.7.5",
    "safety>=3.0.0",
    "httpx>=0.28.1",
]
performance = [
    "locust>=2.17.0",
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "pymdown-extensions>=10.0",
    "mkdocs-material-extensions>=1.3.1",
]

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.12"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = false
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --tb=short"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "performance: marks tests as performance tests",
    "load: marks tests as load tests",
    "security: marks tests as security tests",
    "contract: marks tests as contract tests",
    "smoke: marks tests as smoke tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "src/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_args

[tool.hatch.build.targets.wheel]
packages = ["src"]
